
const Booking = require("../Models/Booking");


//CRUD operations related with booking


//create a booking

const createBooking = async(req ,res)=>{
      console.log("Request body:", req.body);
  console.log("Logged-in user:", req.user);

    const { service, date,time} = req.body;

    try{
        const booking = await Booking.create({
            user:req.user._id ,    // comes from jwt middleware
            service,
            date,
            time,
            status:"pending"
        });
        res.status(201).json (booking)
    }catch(error){
        res.status(500).json({message: error.message});
    }
};


//get 

const getMyBookings = async (req , res)=>{
    try{
        const bookings = await Booking.find({user:req.user._id}); //comes from the protect middleware, so it contains the logged-in user.
        res.json(bookings);
    }catch(error){
        res.status(500).json({message:error.message});
    }
};

//update booking

const updateBooking = async(req , res) =>{
    try{
        const booking = await Booking.findById(req.params.id);
        if(!booking)
            return res.status(404).json({message: "Booking not found"}); //e booking in MongoDB using the id from the URL parameter

        // check for the ownership
        if(booking.user.toString()!== req.user._id.toString()) {
            return res.status(403).json({message: "Not authorized"});

        }
        //updating the booking
        const { service ,date , time , status} = req.body;
        booking.service = service|| booking.service;
        booking.date = date||booking.date;
        booking.time = time||booking.time;
        booking.status= status|| booking.status;

        const updatedBooking = await booking.save();
        res.json(updatedBooking);

    } catch(error){
        res.status(500).json({ message: error.message})
    }
};


// delete booking

const deleteBooking = async (req , res) =>{
    try{
        const booking = await Booking.findById(req.params.id);
        if(!booking) 
            return res.status(404).json({message:"Booking not found"});
          // Ensure user owns this booking
    if (booking.user.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Not authorized" });
    }
    await booking.remove();
res.json({message: "Booking removed" })
    }catch(error){
        res.status(500).json({message: error.message});
    }

};
module.exports = { createBooking, getMyBookings, updateBooking, deleteBooking };
